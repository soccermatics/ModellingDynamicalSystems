
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/lesson3/plot_thebutterflyeffect.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_lesson3_plot_thebutterflyeffect.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_lesson3_plot_thebutterflyeffect.py:


.. _chaosbutterfly:

The butterfly effect
====================

FROM THE BOOK

.. GENERATED FROM PYTHON SOURCE LINES 10-21

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt
    import matplotlib
    from pylab import rcParams
    matplotlib.font_manager.FontProperties(family='Helvetica',size=11)

    from scipy import integrate
    from mpl_toolkits import mplot3d









.. GENERATED FROM PYTHON SOURCE LINES 22-37

The Lorenz equations
--------------------

The differential equations propsed by Lorenz are

.. math::

      \\frac{dX}{dt} &= s(Y-X) \\
      \\frac{dY}{dt} &= rX - Y - XZ \\
      \\frac{dZ}{dt} &= XY - bZ 

There are three parameter values, which are set to $s=10$, $r=28$ 
and $b=8/3$ to create the butterfly (th Lorenz attractor). 

Let's first define a function which gives the derivatives at each point

.. GENERATED FROM PYTHON SOURCE LINES 37-53

.. code-block:: default


    def lorenz(XYZ,t=0):
    
    
        dXdt = s*(XYZ[1] - XYZ[0])                  # X 
        dYdt = r*XYZ[0] - XYZ[1] - XYZ[0]*XYZ[2]    # Y 
        dZdt = XYZ[0]*XYZ[1] - b*XYZ[2]             # Z 
    
        return np.array([dXdt, dYdt, dZdt])


    # Parameter values
    s=10
    r=28
    b=8/3








.. GENERATED FROM PYTHON SOURCE LINES 54-55

Now we solve the equations numerically

.. GENERATED FROM PYTHON SOURCE LINES 55-99

.. code-block:: default


    endtime=300
    dt = 0.01 

    t = np.linspace(0,endtime, int(endtime/dt))               # time
    XYZ0 = np.array([0.3, 1.2, 5.05])          # initial conditions
    XYZ = integrate.odeint(lorenz, XYZ0, t)

    start=int(200/dt)
    finish=int(start+40/dt)

    rcParams['figure.figsize'] = 14/2.54, 14/2.54
    ax=plt.subplot(projection='3d')
    ax.set_xticks(np.arange(-20,21,step=10))
    ax.set_yticks(np.arange(-20,21,step=10))
    ax.set_zticks(np.arange(0,40,step=10))
    ax.yaxis.labelpad=10
    #ax.plot( [mean1, mean1], [-1, 10], linestyle='dashed', color='black')
    #ax.text(-20,-20,50,'(a)') 
    ax.plot3D(XYZ[start:finish,0], XYZ[start:finish,1], XYZ[start:finish,2], lw=1,color='k')
    ax.set_xlabel("Strength of breeze ($X$)")
    ax.set_ylabel("Temperature difference \n between currents ($Y$)")
    ax.set_zlabel("Land/air temperature \n distortion ($Z$) ")

    # Get rid of colored axes planes
    # First remove fill
    ax.xaxis.pane.fill = False
    ax.yaxis.pane.fill = False
    ax.zaxis.pane.fill = False

    # Now set color to white (or whatever is "invisible")
    ax.xaxis.pane.set_edgecolor('w')
    ax.yaxis.pane.set_edgecolor('w')
    ax.zaxis.pane.set_edgecolor('w')

    ax.set_xlim(-21,21)
    ax.set_zlim(0,40) 
    ax.set_ylim(-21,21)


    plt.show()






.. image-sg:: /gallery/lesson3/images/sphx_glr_plot_thebutterflyeffect_001.png
   :alt: plot thebutterflyeffect
   :srcset: /gallery/lesson3/images/sphx_glr_plot_thebutterflyeffect_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 100-101

Plot through time

.. GENERATED FROM PYTHON SOURCE LINES 101-119

.. code-block:: default




    rcParams['figure.figsize'] = 14/2.54, 7/2.54

    finish=int(start+20/dt)

    fig,ax=plt.subplots(num=1)
    ax.plot(XYZ[start:finish,0], color='black')
    ax.plot(XYZ[start:finish,1], color='green')
    ax.plot(XYZ[start:finish,2], color='red')
    plt.show()
    fig.savefig('lorenz_z.pdf', dpi=None, bbox_inches="tight")


    from scipy.signal import argrelextrema





.. image-sg:: /gallery/lesson3/images/sphx_glr_plot_thebutterflyeffect_002.png
   :alt: plot thebutterflyeffect
   :srcset: /gallery/lesson3/images/sphx_glr_plot_thebutterflyeffect_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 120-121

Find local maxima.

.. GENERATED FROM PYTHON SOURCE LINES 121-149

.. code-block:: default


    rcParams['figure.figsize'] = 14/2.54, 7/2.54

    # for local maxima
    zm= XYZ[:,2]
    maxz=argrelextrema(zm, np.greater)
    zm=zm[maxz]

    zm=zm[20:]
    fig,ax=plt.subplots(num=1)
    ax.plot(np.arange(len(zm)),zm, color='black')
    fig.savefig('lorenz_max.pdf', dpi=None, bbox_inches="tight")

    matplotlib.font_manager.FontProperties(family='Helvetica',size=11)

    ax.set_ylabel('Maximum value of $Z$')
    ax.set_xlabel('Iteration round the butterfly')
    ax.set_ylim((27,52))
    ax.set_xlim((0,50))
    ax.set_xticks(range(0,60,10))
    ax.set_yticks(range(30,60,10))
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)

    plt.show()






.. image-sg:: /gallery/lesson3/images/sphx_glr_plot_thebutterflyeffect_003.png
   :alt: plot thebutterflyeffect
   :srcset: /gallery/lesson3/images/sphx_glr_plot_thebutterflyeffect_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 150-151

Now make a map of maxima from one time to the next

.. GENERATED FROM PYTHON SOURCE LINES 151-167

.. code-block:: default


    rcParams['figure.figsize'] = 4/2.54, 4/2.54
    fig,ax=plt.subplots(num=1)
    ax.plot(zm[:-1],zm[1:],linestyle='none',marker='.',color='k')
    ax.text(29,48,'(c)')
    ax.set_ylabel('Next Maximum of $Z$')
    ax.set_xlabel('Previous Maximum of $Z$')
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.set_xticks(np.arange(20,51,step=10))
    ax.set_yticks(np.arange(20,51,step=10))
    ax.set_xlim(27,52)
    ax.set_ylim(27,52) 
    fig.savefig('lorenz_map.pdf', dpi=None, bbox_inches="tight")





.. image-sg:: /gallery/lesson3/images/sphx_glr_plot_thebutterflyeffect_004.png
   :alt: plot thebutterflyeffect
   :srcset: /gallery/lesson3/images/sphx_glr_plot_thebutterflyeffect_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.387 seconds)


.. _sphx_glr_download_gallery_lesson3_plot_thebutterflyeffect.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_thebutterflyeffect.py <plot_thebutterflyeffect.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_thebutterflyeffect.ipynb <plot_thebutterflyeffect.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
